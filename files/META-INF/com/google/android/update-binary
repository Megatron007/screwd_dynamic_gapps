#!/sbin/sh

# Based on osm0sis's shell installer script with bits from Chainfire's SuperSU shell installer script

# This file contains parts from the scripts taken from the TK GApps Project by TKruzze and osmOsis.
# This file contains parts from the scripts taken from the Open GApps Project by mfonville.
# This file contains parts from the update-binary taken from the SuperSU installation zip.
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# These scripts are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

outfd=$2
ui_print() {
  echo "ui_print $1" > /proc/self/fd/$outfd
  echo "ui_print" > /proc/self/fd/$outfd
}

ui_print "*****************************"
ui_print "** PureNexus Dynamic GApps **"
ui_print "*****************************"

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, > /dev/null
  else
    cat /proc/mounts | grep $1 > /dev/null
  fi
  return $?
}
toolbox_mount() {
  RW=rw
  if [ ! -z "$2" ]; then
    RW=$2
  fi

  DEV=
  POINT=
  FS=
  for i in `cat /etc/fstab | grep "$1"`; do
    if [ -z "$DEV" ]; then
      DEV=$i
    elif [ -z "$POINT" ]; then
      POINT=$i
    elif [ -z "$FS" ]; then
      FS=$i
      break
    fi
  done
  if (! is_mounted $1 $RW); then mount -t $FS -o $RW $DEV $POINT; fi
  if (! is_mounted $1 $RW); then mount -t $FS -o $RW,remount $DEV $POINT; fi

  DEV=
  POINT=
  FS=
  for i in `cat /etc/recovery.fstab | grep "$1"`; do
    if [ -z "$POINT" ]; then
      POINT=$i
    elif [ -z "$FS" ]; then
      FS=$i
    elif [ -z "$DEV" ]; then
      DEV=$i
      break
    fi
  done
  if [ "$FS" = "emmc" ]; then
    if (! is_mounted $1 $RW); then mount -t ext4 -o $RW $DEV $POINT; fi
    if (! is_mounted $1 $RW); then mount -t ext4 -o $RW,remount $DEV $POINT; fi
    if (! is_mounted $1 $RW); then mount -t f2fs -o $RW $DEV $POINT; fi
    if (! is_mounted $1 $RW); then mount -t f2fs -o $RW,remount $DEV $POINT; fi
  else
    if (! is_mounted $1 $RW); then mount -t $FS -o $RW $DEV $POINT; fi
    if (! is_mounted $1 $RW); then mount -t $FS -o $RW,remount $DEV $POINT; fi
  fi
}

ui_print "Mounting /system..."
toolbox_mount /system

file_getprop() { grep "^$2" "$1" | cut -d= -f2; }

rom_build_prop=/system/build.prop

system_sdk=$(file_getprop $rom_build_prop "ro.build.version.sdk")
gapps_sdk=23

ui_print "Checking if GApps are compatible with your system..."
ui_print "You need a sdk version of $gapps_sdk or greater..."
if [ "$system_sdk" -ge "$gapps_sdk" ]; then
  ui_print "Your sdk version is $system_sdk, GApps are compatible..."
  ui_print "Continuing install..."
else
  ui_print "Your sdk version is $system_sdk, GApps are not compatible..."
  ui_print "Aborting install..."
  umount /system
  exit 1
fi

arch=$(file_getprop $rom_build_prop "ro.product.cpu.abi=")

ui_print "Setting system lib path..."
# Set system lib path
if (echo "$arch" | grep -qi "arm64"); then
  systemlib=/system/lib64
else
  systemlib=/system/lib
fi
ui_print "Path $systemlib is set..."

ui_print "Removing conflicting apks..."
rm -rf "/system/app/BrowserProviderProxy" "/system/app/PartnerBookmarksProvider" "/system/app/Provision" "/system/app/QuickSearchBox" "/system/priv-app/BrowserProviderProxy" "/system/priv-app/PartnerBookmarksProvider" "/system/priv-app/Provision" "/system/priv-app/QuickSearchBox"

zipfile=$3

set_perm() {
  chown "$1:$2" "$4";
  chmod "$3" "$4";
}

ui_print "Installing Dynamic GApps..."
unzip -o "$zipfile" "system/*" -d /
unzip -o "$zipfile" "dynamic/*" -d /tmp
set_perm 0 0 0777 /tmp/dynamic/dynamic.sh
/tmp/dynamic/dynamic.sh

set_metadata_recursive() {
  LD_LIBRARY_PATH=$systemlib;
  dir="$1";
  shift;
  until [ ! "$2" ]; do
    case $1 in
      uid) chown -R $2 $dir;;
      gid) chown -R :$2 $dir;;
      dmode) find "$dir" -type d -exec chmod $2 {} +;;
      fmode) find "$dir" -type f -exec chmod $2 {} +;;
      capabilities) ;;
      selabel)
        for i in /system/bin/toybox /system/bin/toolbox; do
          find "$dir" -exec $i chcon -h $2 {} +;
          find "$dir" -exec $i chcon $2 {} +;
        done;
        find "$dir" -exec chcon -h $2 '{}' +;
        find "$dir" -exec chcon $2 '{}' +;
      ;;
      *) ;;
    esac;
    shift 2;
  done;
}

ui_print "Setting permissions..."
# Change pittpatt folders to root:shell per Google Factory Settings if not arm64
if (echo "$arch" | grep -qi "armeabi"); then
find "/system/vendor/pittpatt" -type d -exec chown 0.2000 '{}' \; > /dev/null
fi
# Set metadata
set_metadata_recursive "/system/addon.d" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "/system/app" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "/system/etc/permissions" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "/system/etc/preferred-apps" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "/system/etc/sysconfig" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "system/etc/updatecmds" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "/system/framework" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "/system/lib" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "/system/lib64" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "/system/priv-app" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
set_metadata_recursive "/system/usr/srec" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
# Set metadata on pittpatt if not arm64
if (echo "$arch" | grep -qi "armeabi"); then
set_metadata_recursive "/system/vendor/pittpatt" uid 0 gid 0 dmode 0755 fmode 0755 capabilities 0x0 selabel u:object_r:system_file:s0 > /dev/null
fi

ui_print "Unmounting /system..."
umount /system

ui_print "Installation complete!"
